httpsvibloasiapbat-dau-voi-framework-slim--part--EzxbGWLê Bảo_Ngân baongan Follow Published Wednesday PM min read Bắt_đầu với framework Slim Part Report Slim là một micro framework tuyệt_vời cho cho các ứng_dụng web RESTful Api và các website
Mục_đích của chúng là tạo_ra một RESTful Api chỉ với routing logic nghiệp_vụ và cơ_sở_dữ_liệu
Các tiêu_chuẩn như PSR và một số các phương_pháp sử_dụng Slim hữu_ích sẽ được giới_thiệu trong bài_viết này
Requirements PHP MySQL hoặc MariaDB Apache webserver với mod rewrite and htaccess Composer Cài đặt Việc cài_đặt slim cực kì đơn_giản bạn chỉ cần tạo một folder mới và thiết_lập Slim với câu lệnh composer require slimslim Ở slim việc triển_khai PSR- đã được tách riêng
Có nghĩa là bên_cạnh PSR- bạn cũng có_thể cài_đặt các chuẩn khác như nyholmpsr
Và nếu bạn vẫn muốn dùng PSR- thì bạn sẽ phải cài_đặt chúng riêng với câu lệnh composer require slimpsr Tiếp_theo chúng_ta cũng cần implement cả PSR- container cái này sẽ dùng_cho dependency injection và autowiring
Chạy câu lệnh để cài_đặt PHP-DI composer require php-diphp-di Ngoài_ra với mục_đích test unit test bạn có_thể cài_đặt thêm cả phpunit với dev option composer require phpunitphpunit --dev Vậy là chúng_ta đã cài_đặt hầu_hết các dependency cơ_bản cần_thiết nhất cho một dự_án của mình
Như_vậy là tạm đủ rồi nếu sau_này cần sử_dụng thêm gì thì mình sẽ cài thêm sau nhé
Lưu_ý Nếu làm_việc với git thì cũng tương_tự như Laravel đừng commit folder vendor lên nhé
Cấu_trúc thư_mục Nếu có một cấu_trúc thư_mục dự_án hợp_lý sẽ giúp đơn_giản_hóa việc thiết_lập dự_án trên server và ngoài_ra còn tăng tính bảo_mật cho toàn_bộ ứng_dụng chính vì_vậy phần này chúng_ta sẽ đi_vào tìm_hiểu một kiểu cấu_trúc thư_mục được recommend nhé
Tạo cấu_trúc thư_mục trong thư_mục gốc của dự_án như_sau ├── config Nơi chứa tất_cả các file config ├── public Web server files DocumentRoot │ └── htaccess Apache redirect rules │ └── indexphp Front Controller ├── templates Twig templates giao_diện cho slim ├── src PHP source code App namespace ├── tmp Các file tạm cache and logfiles ├── vendor Module của composer ├── htaccess Định_nghĩa chuyển_hướng đến public directory ├── gitignore Git ignore └── composerjson Project dependencies và autoloader Trong ứng_dụng web một điều cực kì quan_trọng đó là chúng_ta phải phân biệc được đâu là phần được public và đâu là phần non-public
Thư_mục public sẽ phục_vụ cho ứng_dụng của bạn và sẽ có_thế được truy_cập trực_tiếp từ các trình_duyệt web các công_cụ tìm_kiếm và API client
Tất_cả các thư_mục khác sẽ không_được quyền truy xuất trực_tiếp điều này có_thể được thực_hiện bằng cách định_nghĩa các public folder trong Apache như các root document trong website của bạn
PSR- autoloading Một điều quan_trọng nữa là chúng_ta phải có một trình PSR- autoloader hoạt_động
Trong bước_tiếp theo chúng_ta sẽ thực_hiện việc định_nghĩa src\ folder như thư_mục gốc cho App\ namespace
Thêm autoload setting trong file composerjson autoload psr- App\\ src autoload-dev psr- App\\Test\\ tests File composerjson hoàn_chỉnh sẽ trông như_thế này require php-diphp-di slimpsr slimslim require-dev phpunitphpunit autoload psr- App\\ src autoload-dev psr- App\\Test\\ tests config process-timeout sort-packages true Cuối_cùng nhớ chạy composer update để các thay_đổi bên_trên có hiệu_lực nhé
Apache URL rewriting Để chạy được ứng_dụng slim với apache chúng_ta phải thêm một số quy_tắc rewrite url để redirect web traffic đến front controller đã được chỉ_định
Front controller chính là file indexphp và điểm truy_cập vào ứng_dụng
Tại file htaccess trong thư_mục public\ và thêm_vào nội_dung sau Redirect to front controllerRewriteEngine On RewriteBase RewriteCond REQUEST FILENAME !-dRewriteCond REQUEST FILENAME !-fRewriteRule indexphp [QSAL] Lưu_ý bạn không_được đổi chỉ_thị RewriteRule
Nó phải chính_xác như hình trên bởi với cấu_trúc thư_mục như đã nói ở trên front controller chính là file indexphp
Tại fie htaccess ở thư_mục gốc của dự_án thêm nội_dung RewriteEngine onRewriteRule public [L]RewriteRule public [L] Bước thứ này cực kì quan_trọng để chạy ứng_dụng Slim trong một thư_mục con và ở môi_trường phát_triển
Trong file front controller indexphp tại thư_mục public bạn tiếp_tục thêm những nội_dung sau run Front controller chính là điểm vào của ứng_dụng và xử_lý tất_cả các request đến ứng_dụng bằng cách phần luồng các request đó thông_qua một single handler object
Configuration Setting file Như đã nói ở trên thì folder config chính là nơi sẽ chứa tất_cả các config file
Tệp configsettingsphp là tệp cấu hình chính cũng là nơi cấu hình môi_trường
Trong thư_mục config tạo file settingsphp với nội_dung true Parameter is passed to the default ErrorHandler View in rendered output by enabling the displayErrorDetails setting For the console and unit tests we also disable it 'log errors' true Display error details in error log 'log error details' true]return settings Một lưu_ý tất_cả những nơi config việc hiển_thị error log nên để là false trên môi_trường production bởi_lẽ nó rất dễ dẫn đến rủi_ro về việc lộ_key cũng_như các thông_tin khác trong dự_án
Bootstrap file Quá_trình khởi_động ứng_dụng được bắt_đầu khi có request được gửi đến
Quá_trình sẽ bao_gồm trình composer autoloader và tiếp_tục với việc buil container tạo ứng_dụng và đăng_ký routes middleware
Tiếp_tục tạo file bootstrapphp trong thư_mục config với nội_dung addDefinitions  DIR   'containerphp' Build PHP-DI Container instancecontainer containerBuilder-build Create App instanceapp container-getAppclass Register routesrequire   DIR 'routesphp'app Register middlewarerequire   DIR 'middlewarephp'appreturn app Setup Route Tạo một file routesphp addBodyParsingMiddleware Add the Slim built-in routing middleware app-addRoutingMiddleware Catch exceptions and errors app-addErrorMiddlewareclass Middleware có_thể được thực_thi trước_khi hoặc sau_khi ứng_dụng slim thực_hiện yêu_cầu và trả về response object Đoạn code trên thực_hiện add thêm một_vài middleware như Catch exception
Container Slim sử_dụng một injection dependencty container để chuẩn_bị quản_lý và inject dependency của ứng_dụng
Bạn có_thể thêm bất_kỳ container library nào implement PSR- interface
Tạo file mới cho mục container configcontainerphp với nội_dung function return require   DIR 'settingsphp' Appclass function ContainerInterface container AppFactorysetContainercontainer return AppFactorycreate ErrorMiddlewareclass function ContainerInterface container app container-getAppclass settings container-get'settings'['error'] return new ErrorMiddleware app-getCallableResolver app-getResponseFactory boolsettings['display error details'] boolsettings['log errors'] boolsettings['log error details'] ] Với đoạn code trên này bạn đã nói_với slim rằng ứng_dụng luôn require file settingphp bên trên tiếp_theo đó set container cũng_như error middleware cho toàn_bộ ứng_dụng
Base path Hầu_hết tất_cả mọi_người sẽ gặp_phải lỗi Error not found bởi_lẽ hiện_tại base path chưa được thiết_lập chính_xác
Lý_tưởng là root document của máy chủ production trỏ trực_tiếp đến thư_mục public
Nếu ứng_dụng slim của bạn nằm_trong một thư_mục con không trực_tiếp nằm_trong root document của web browser bạn phải thiết_lập chính_xác base path
Ví_dụ root document là varwwwdomaincomhtdocs tuy_nhiên ứng_dụng của bạn lại đặt trong thư_mục con varwwwdomaincomhtdocsmy-app như_vậy bạn phải thiết_lập my-app là base path của ứng_dụng
Chính_xác hơn Trong nghĩa cảnh này sub-directory chính là sub-directory của dự_án và không_phải thử mục public\
Trong ví_dụ này chính là khi ứng_dụng không đặt trực_tiếp trong root document mà đặt trong thư_mục con của nó
Vì lý_do bảo_mật bạn luôn_luôn nên đặt front controller của mình indexphp trong thư_mục public và tuyệt_đối không_nên đặt trực_tiếp trong thư_mục gốc của dự_án
Bạn có_thể set base path một_cách thủ_công như_sau app-setBasePath'slim-tutorial' Tuy_nhiên vấn_đề ở_đây chính là base path có_thể khác_nhau tùy_theo host dev testing staging prod Chính vì_vậy BasePathMiddleware phát_hiện và đặt base path và slim app instance Để cài_đặt BasePathMiddleware sử_dụng câu lệnh composer composer require selectivebasepath Tiếp_theo inject nó bằng cách config container use Selective\BasePath\BasePathMiddleware return [ BasePathMiddlewareclass function ContainerInterface container return new BasePathMiddlewarecontainer-getAppclass ] Cuối_cùng là thêm BasePath middleware này vào stack middleware
Như_vậy nghĩa_là mỗi khi có request request sẽ phải đi_qua basepath middleware để set lại base path
Kết_luận Trên đây là những bước cơ_bản đầu_tiên để tạo một project Slim trong bài sau mình sẽ nói về cách code để xử_lý một luồng request hoàn_chỉnh
Tài_liệu tham_khảo httpsodangithubioslim-tutorialhtml PHP slim framework All Rights Reserved Report